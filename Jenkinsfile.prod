pipeline {
  agent any

  environment {
    DOCKER_USERNAME = credentials('docker-username')
    DOCKER_PASSWORD = credentials('docker-password')
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Start container') {
      steps {
        echo 'Starting container from Docker Hub...'
        bat 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
        bat 'docker-compose -f docker-compose.prod.yml pull'
        bat 'docker-compose -f docker-compose.prod.yml up -d --no-color'

        script {
          def retries = 30
          def success = false
          while (retries > 0 && !success) {
            try {
              bat(script: 'curl -f http://localhost:8585', returnStatus: true)
              success = true
            } catch (Exception e) {
              echo "Service not responding, retrying... ($retries retries left)"
              sleep(time: 10, unit: 'SECONDS')
              retries--
            }
          }
          if (!success) {
            error "Service failed to start after several retries"
          }
        }
        bat 'docker-compose -f docker-compose.prod.yml logs --tail=100'
        bat 'docker-compose -f docker-compose.prod.yml ps'
      }
    }

    stage('Run tests against the container') {
      steps {
        script {
          def status = bat(script: 'curl -f http://localhost:8585/actuator/health', returnStatus: true)
          if (status != 0) {
            error "Health check failed"
          }
        }
      }
    }
  }

  post {
    always {
      echo 'Pipeline completed'
    }
  }
}
